{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//Get Funds from users\n// Withdraw funds\n// Set a minimum funding value\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"./PriceConverter.sol\";\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    //871711\n    //23515\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didnt send enough\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onleyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //reset the array\n        funders = new address[](0);\n\n        //actually withdraw the funds\n        //transfer:\n        // below address(this) refers to the address of this smartcontract FundMe and we are sending balance to who ever is calling the withdraw function\n        // msg.sender will have the address of caller of withdraw function.\n        // msg.sender is of type address\n        // payable(msg.sender) is of type payable address\n        // with transfer the gas value is capped to 2300 if more gas is used then it throws an error and transaction is reverted\n        // payable(msg.sender).transfer(address(this).balance);\n        // send:\n        // With send the gas value is also capped but it does not throw error however it returns boolean\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess,\"Send Failure\")\n\n        // call:\n        // lower level commands\n        // call returns multiple values and the empty \"\" means that we can call a function of the contract and if it returns value than\n        // that return value gets stored in DataReturned Variable as mentioned below\n        // call is recommended method\n        (bool sendSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(sendSuccess, \"Call Failure\");\n    }\n\n    modifier onleyOwner() {\n        // require(msg.sender == i_owner, \"Sender is not the owner\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _; // Telling here that first check the above statement and run the code after wards\n    }\n\n    //What happens when someone sends this contract ETH without calling the fund function\n\n    // Explainer from: https://solidity-by-example.org/fallback/\n    // Ether is sent to contract\n    //      is msg.data empty?\n    //          /   \\\n    //         yes  no\n    //         /     \\\n    //    receive()?  fallback()\n    //     /   \\\n    //   yes   no\n    //  /        \\\n    //receive()  fallback()\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        //price is price of Eth in terms of usd\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}